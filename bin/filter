#!/bin/bash

set -e
opt_l=n opt_0=n opt_z=n opy_f=n
usage () { echo 'filter <option(s)> <expression> [<arg(s)>]'; }

while getopts :l0zfh opt; do                                    # {{{1
  case "$opt" in
    l) opt_l=y ;;
    0) opt_l=y opt_0=y ;;
    z) opt_z=y ;;
    f) opt_f=y ;;
    h) usage; exit ;;
    ?) echo "invalid option: -$OPTARG" >&2; exit 1 ;;
  esac
done                                                            # }}}1

shift "$(( OPTIND - 1 ))"
[ "$#" -ge 1 ] || { usage >&2; exit 1; }
expression="$1"; shift

abspath ()
{ perl -MFile::Spec -e 'print File::Spec->rel2abs($ARGV[0])' "$1"; }

evaluate () { ( eval "$expression" ); }

if [ "$opt_z" == y ]; then
  output () { printf '%s\0' "$it"; }
else
  output () { printf '%s\n' "$it"; }
fi

if [ "$opt_f" == y ]; then                                      # {{{1
  set_vars ()
  {
         path="$( readlink -f "$it"   )"
          abs="$( abspath     "$it"   )"
         base="$( basename    "$it"   )"
          dir="$( dirname     "$it"   )"
    path_base="$( basename    "$path" )"
     path_dir="$( dirname     "$path" )"
      abs_dir="$( dirname     "$abs"  )"
  }
else
  set_vars () { :; }
fi                                                              # }}}1

run () { set_vars; ! evaluate || output; }

if [ "$opt_l" == y ]; then
  if [ "$opt_0" == y ]; then opts=( -d '' ); else opts=(); fi
  while read -r "${opts[@]}"; do it="$REPLY"; run; done
else
  for it in "$@"; do run; done
fi

# vim: set tw=70 sw=2 sts=2 et fdm=marker :
